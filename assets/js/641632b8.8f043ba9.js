"use strict";(self.webpackChunkxing_life_3=self.webpackChunkxing_life_3||[]).push([[6733],{8098:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>f});var o=t(4848),i=t(8453);const r={},l="environment value",a={id:"technique/flutter/environment_value",title:"environment value",description:"flutterconfig//pub.dev/packages/flutterconfig",source:"@site/docs/technique/flutter/environment_value.md",sourceDirName:"technique/flutter",slug:"/technique/flutter/environment_value",permalink:"/docs/technique/flutter/environment_value",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"techniqueSidebar",previous:{title:"dio",permalink:"/docs/technique/flutter/dio"},next:{title:"EnvironmentConfig",permalink:"/docs/technique/flutter/environmentconfig"}},s={},f=[{value:"set up environment_config.yaml",id:"set-up-environment_configyaml",level:2},{value:"using file to general config file",id:"using-file-to-general-config-file",level:2},{value:"using extension to identify config mode",id:"using-extension-to-identify-config-mode",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"environment-value",children:"environment value"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["flutter_config: ",(0,o.jsx)(n.a,{href:"https://pub.dev/packages/flutter_config",children:"https://pub.dev/packages/flutter_config"})]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["environment_config: ",(0,o.jsx)(n.a,{href:"https://pub.dev/packages/environment_config",children:"https://pub.dev/packages/environment_config"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Using flutter_config to get environment value from .env\n\nUsing environment_config to generate .env\n"})}),"\n",(0,o.jsx)(n.h1,{id:"environment_config",children:"environment_config"}),"\n",(0,o.jsx)(n.h2,{id:"set-up-environment_configyaml",children:"set up environment_config.yaml"}),"\n",(0,o.jsx)(n.p,{children:"vim environment_config.yaml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"environment_config:\n  path: environment_config.dart # optional, result file path against `lib/` folder\n  dotenv_path: .env # optional, result file path for .env file against project root folder\n  class: EnvironmentConfig # optional, class name\n  dev_extension: # optional, by default undefined, allows to specify command option to use extension\n\n  fields: # set of fields for command\n    some_key: # key name\n      type: # optional, default to 'String'\n      short_name: # optional, short name for key during command run\n      const: # optional, default to TRUE\n      pattern: # optional, specified pattern for key value, use __VALUE__ to insert entered value anywhere in the pattern\n      default: # optional, default value for key, if not provided key will be required during command run\n      dotenv: # optional, default to FALSE, if this field should be added to .env file\n      config_field: # optional, default to TRUE, if this field should be added to Dart file\n      env_var: # optional, global environment variable name\n      static: # options, default to TRUE, if this field should be static, if FALSE, `const` will be be ignored\n\n  imports: # optional, array of imports, to include in config file\n    - package:some_package\n\n  extensions: # set of extensions for default field list\n    some_extension: # extension name\n      some_key:\n        const: # optional, overrides `const` value for the field\n        pattern: # optional, overrides `pattern` value for the field\n        default: # optional, overrides `default` value for the field\n        env_var: # optional, overrides `env_var` value for the field\n\n    imports: # optional, adds set of imports to main configulration\n      - package:some_other_package\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-file-to-general-config-file",children:"using file to general config file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"flutter pub run environment_config:generate --config=path/to/file.yaml\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-extension-to-identify-config-mode",children:"using extension to identify config mode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"flutter pub run environment_config:generate --config-extension=dev\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);