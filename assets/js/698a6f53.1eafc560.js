"use strict";(self.webpackChunkxing_life_3=self.webpackChunkxing_life_3||[]).push([[3897],{527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(4848),a=t(8453);const s={},c="Cloud Computing Fundamentals",r={id:"technique/google_cloud/cloud_computing_fundamentals",title:"Cloud Computing Fundamentals",description:"https://www.cloudskillsboost.google/paths/36/course_templates/153",source:"@site/docs/technique/google_cloud/cloud_computing_fundamentals.md",sourceDirName:"technique/google_cloud",slug:"/technique/google_cloud/cloud_computing_fundamentals",permalink:"/docs/technique/google_cloud/cloud_computing_fundamentals",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"techniqueSidebar",previous:{title:"Google Cloud",permalink:"/docs/technique/google_cloud/"},next:{title:"Vertex AI PaLM API",permalink:"/docs/technique/google_cloud/vertex_ai_palm_api"}},i={},l=[{value:"check info",id:"check-info",level:2},{value:"Configuring environment",id:"configuring-environment",level:2},{value:"Finding project information",id:"finding-project-information",level:2},{value:"Setting environment variables",id:"setting-environment-variables",level:2},{value:"Creating a virtual machine",id:"creating-a-virtual-machine",level:2},{value:"Deploy app",id:"deploy-app",level:2},{value:"Create a function",id:"create-a-function",level:2},{value:"GKE cluster",id:"gke-cluster",level:2},{value:"Create a bucket",id:"create-a-bucket",level:2},{value:"Cloud SQL instance",id:"cloud-sql-instance",level:2},{value:"Pub/Sub: Python",id:"pubsub-python",level:2},{value:"Pub/Sub:",id:"pubsub",level:2},{value:"User Authentication: Identity-Aware Proxy",id:"user-authentication-identity-aware-proxy",level:2},{value:"VPC networks",id:"vpc-networks",level:2},{value:"VPC Networks - Controlling Access",id:"vpc-networks---controlling-access",level:2},{value:"HTTP Load Balancer with Cloud Armor",id:"http-load-balancer-with-cloud-armor",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"Dataproc",id:"dataproc",level:2},{value:"Dataflow",id:"dataflow",level:2},{value:"Dataprep",id:"dataprep",level:2},{value:"Remote Desktop (RDP) into the Windows Server",id:"remote-desktop-rdp-into-the-windows-server",level:2},{value:"Create and Manage Cloud Resources: Challenge Lab",id:"create-and-manage-cloud-resources-challenge-lab",level:2},{value:"Securing Virtual Machines using BeyondCorp",id:"securing-virtual-machines-using-beyondcorp",level:2},{value:"Build and Secure Networks in Google Cloud: Challenge Lab",id:"build-and-secure-networks-in-google-cloud-challenge-lab",level:2},{value:"Perform Foundational Data, ML, and AI Tasks in Google Cloud: Challenge Lab",id:"perform-foundational-data-ml-and-ai-tasks-in-google-cloud-challenge-lab",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"cloud-computing-fundamentals",children:"Cloud Computing Fundamentals"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.cloudskillsboost.google/paths/36/course_templates/153",children:"https://www.cloudskillsboost.google/paths/36/course_templates/153"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"check-info",children:"check info"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud auth list\n\ngcloud config list project\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuring-environment",children:"Configuring environment"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud config set compute/region REGION\n\ngcloud config get-value compute/region\n\ngcloud config set compute/zone ZONE\n\ngcloud config get-value compute/zone\n"})}),"\n",(0,o.jsx)(n.h2,{id:"finding-project-information",children:"Finding project information"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud config get-value project\n\ngcloud compute project-info describe --project $(gcloud config get-value project)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"setting-environment-variables",children:"Setting environment variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'export PROJECT_ID=$(gcloud config get-value project)\n\nexport ZONE=$(gcloud config get-value compute/zone)\n\necho -e "PROJECT ID: $PROJECT_ID\\nZONE: $ZONE"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-virtual-machine",children:"Creating a virtual machine"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud compute instances create gcelab2 --machine-type e2-medium --zone $ZONE\n\ngcloud compute instances create --help\n\ngcloud compute instances list\n\ngcloud compute instances list --filter=\"name=('gcelab2')\"\n\ngcloud compute firewall-rules list\n\ngcloud compute firewall-rules list --filter=\"network='default'\"\n\ngcloud compute firewall-rules list --filter=\"NETWORK:'default' AND ALLOW:'icmp'\"\n\ngcloud compute ssh gcelab2 --zone $ZONE\n\n# http\ngcloud compute instances add-tags gcelab2 --tags http-server,https-server\n\n# firewall\ngcloud compute firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server\n\ngcloud compute firewall-rules list --filter=ALLOW:'80'\n\ncurl http://$(gcloud compute instances list --filter=name:gcelab2 --format='value(EXTERNAL_IP)')\n\ngcloud logging logs list\ngcloud logging logs list --filter=\"compute\"\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"deploy-app",children:"Deploy app"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1. Enable Google App Engine Admin API\n\ngcloud app deploy\n\ngcloud app browse\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"create-a-function",children:"Create a function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# create a bucket\ngsutil mb -p [PROJECT_ID] gs://[BUCKET_NAME]\n\n# deploy\ngcloud functions deploy helloWorld \\\n  --stage-bucket [BUCKET_NAME] \\\n  --trigger-topic hello_world \\\n  --runtime nodejs20\n\n# check the function\ngcloud functions describe helloWorld\n\n# send data and run the function\nDATA=$(printf 'Hello World!'|base64) && gcloud functions call helloWorld --data '{\"data\":\"'$DATA'\"}'\n\ngcloud functions logs read helloWorld\n"})}),"\n",(0,o.jsx)(n.h2,{id:"gke-cluster",children:"GKE cluster"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud container clusters create --machine-type=e2-medium --zone=ZONE lab-cluster\n\ngcloud container clusters get-credentials lab-cluster --zone=ZONE\n\nkubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0\n\nkubectl expose deployment hello-server --type=LoadBalancer --port 8080\n\nkubectl get service\n\ngcloud container clusters delete lab-cluster\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"create-a-bucket",children:"Create a bucket"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gsutil mb gs://<YOUR-BUCKET-NAME>\n\ngsutil cp ada.jpg gs://YOUR-BUCKET-NAME\n\ngsutil cp -r gs://YOUR-BUCKET-NAME/ada.jpg .\n\ngsutil cp gs://YOUR-BUCKET-NAME/ada.jpg gs://YOUR-BUCKET-NAME/image-folder/\n\ngsutil ls gs://YOUR-BUCKET-NAME\n\ngsutil rm gs://YOUR-BUCKET-NAME/ada.jpg\n\n# Make object publicly accessible\ngsutil acl ch -u AllUsers:R gs://YOUR-BUCKET-NAME/ada.jpg\n# Remove public access\ngsutil acl ch -d AllUsers gs://YOUR-BUCKET-NAME/ada.jpg\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"cloud-sql-instance",children:"Cloud SQL instance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Create a Cloud SQL instance in dashborad\n\ngcloud sql connect myinstance --user=root\n\n--- mysql console\nCREATE DATABASE guestbook;\n\nUSE guestbook;\n\nCREATE TABLE entries (guestName VARCHAR(255), content VARCHAR(255),\n    entryID INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(entryID));\n    INSERT INTO entries (guestName, content) values ("first guest", "I got here!");\nINSERT INTO entries (guestName, content) values ("second guest", "Me too!");\n\nSELECT * FROM entries;\n--- sql end\n'})}),"\n",(0,o.jsx)(n.h2,{id:"pubsub-python",children:"Pub/Sub: Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'## Create a virtual environment\n\nsudo apt-get install -y virtualenv\npython3 -m venv venv\nsource venv/bin/activate\n\n## Install the client library\n\npip install --upgrade google-cloud-pubsub\ngit clone https://github.com/googleapis/python-pubsub.git\ncd python-pubsub/samples/snippets\n\n## Pub/Sub - the Basics\n## Create a topic\necho $GOOGLE_CLOUD_PROJECT\ncat publisher.py\n\n## Create a topic\npython publisher.py $GOOGLE_CLOUD_PROJECT create MyTopic\npython publisher.py $GOOGLE_CLOUD_PROJECT list\n\n## Create a subscription\npython subscriber.py $GOOGLE_CLOUD_PROJECT create MyTopic MySub\npython subscriber.py $GOOGLE_CLOUD_PROJECT list-in-project\npython subscriber.py -h\n\n## Publish messages\ngcloud pubsub topics publish MyTopic --message "Hello"\n\n## View messages\npython subscriber.py $GOOGLE_CLOUD_PROJECT receive MySub\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"pubsub",children:"Pub/Sub:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'gcloud pubsub topics create myTopic\ngcloud pubsub topics list\ngcloud pubsub topics create Test1\ngcloud pubsub topics delete Test1\n\ngcloud pubsub subscriptions create --topic myTopic mySubscription\ngcloud pubsub topics list-subscriptions myTopic\ngcloud pubsub subscriptions create --topic myTopic Test1\ngcloud pubsub subscriptions delete Test1\n\ngcloud pubsub topics publish myTopic --message "Hello"\ngcloud pubsub subscriptions pull mySubscription --auto-ack\ngcloud pubsub topics publish myTopic --message "Publisher 1"\ngcloud pubsub topics publish myTopic --message "Publisher a"\ngcloud pubsub topics publish myTopic --message "Publisher @"\ngcloud pubsub subscriptions pull mySubscription --auto-ack --limit=3\n\n\n### receive a message\ngcloud pubsub subscriptions pull --auto-ack MySub\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"user-authentication-identity-aware-proxy",children:"User Authentication: Identity-Aware Proxy"}),"\n",(0,o.jsx)(n.p,{children:"gsutil cp gs://spls/gsp499/user-authentication-with-iap.zip ."}),"\n",(0,o.jsx)(n.p,{children:"Restrict access with IAP\nNavigation menu Navigation menu icon > Security > Identity-Aware Proxy."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Deploy the application and protect it with IAP\ngcloud services disable appengineflex.googleapis.com\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## The X-Goog-Authenticated-User- headers are provided by IAP, and the names are case-insensitive,\n\nuser_email = request.headers.get('X-Goog-Authenticated-User-Email')\nuser_id = request.headers.get('X-Goog-Authenticated-User-ID')\n\npage = render_template('index.html', email=user_email, id=user_id)\nHello, {{ email }}! Your persistent ID is {{ id }}.\n\ndef user():\n    assertion = request.headers.get('X-Goog-IAP-JWT-Assertion')\n    if assertion is None:\n        return None, None\n\n    info = jwt.decode(\n        assertion,\n        keys(),\n        algorithms=['ES256'],\n        audience=audience()\n    )\n\n    return info['email'], info['sub']\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"vpc-networks",children:"VPC networks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\n### Create the managementnet network by dashboard\ngcloud compute networks create managementnet --project=qwiklabs-gcp-03-52837f06f240 --subnet-mode=custom --mtu=1460 --bgp-routing-mode=regional\n\ngcloud compute networks subnets create managementsubnet-europe-west1 --project=qwiklabs-gcp-03-52837f06f240 --range=10.130.0.0/20 --stack-type=IPV4_ONLY --network=managementnet --region=europe-west1\n\n### Create the privatenet network\ngcloud compute networks create privatenet --subnet-mode=custom\ngcloud compute networks subnets create privatesubnet-europe-west1 --network=privatenet --region=europe-west1 --range=172.16.0.0/24\ngcloud compute networks subnets create privatesubnet-us-east1 --network=privatenet --region=us-east1 --range=172.20.0.0/20\n\ngcloud compute networks list\ngcloud compute networks subnets list --sort-by=NETWORK\n\n### Create the firewall rules for managementnet by dashboard\ngcloud compute --project=qwiklabs-gcp-03-52837f06f240 firewall-rules create managementnet-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=managementnet --action=ALLOW --rules=tcp:22,tcp:3389,icmp --source-ranges=0.0.0.0/0\n\n### Create the firewall rules for privatenet\ngcloud compute firewall-rules create privatenet-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=privatenet --action=ALLOW --rules=icmp,tcp:22,tcp:3389 --source-ranges=0.0.0.0/0\n\ngcloud compute firewall-rules list --sort-by=NETWORK\n\n### create managementnet VM\ngcloud compute instances create managementnet-europe-west1-vm --project=qwiklabs-gcp-03-52837f06f240 --zone=europe-west1-c --machine-type=e2-micro --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=managementsubnet-europe-west1 --metadata=enable-oslogin=true --maintenance-policy=MIGRATE --provisioning-model=STANDARD --service-account=860215612917-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --create-disk=auto-delete=yes,boot=yes,device-name=managementnet-europe-west1-vm,image=projects/debian-cloud/global/images/debian-11-bullseye-v20231212,mode=rw,size=10,type=projects/qwiklabs-gcp-03-52837f06f240/zones/europe-west1-c/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --labels=goog-ec-src=vm_add-gcloud --reservation-affinity=any\n\n### create privatenet VM\ngcloud compute instances create privatenet-europe-west1-vm --zone=europe-west1-c --machine-type=e2-micro --subnet=privatesubnet-europe-west1\ngcloud compute instances list --sort-by=ZONE\n\n### Explore the connectivity between VM instances\nping internal IPs and External IPs\n\n### Create a VM instance with multiple network interfaces\nset up multiple network\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"vpc-networks---controlling-access",children:"VPC Networks - Controlling Access"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"create two vm instances and install nginx. one is set http-server tag and open the http-traffic\nCreate the firewall rule\n\nCreate a test-vm\ngcloud compute instances create test-vm --machine-type=e2-micro --subnet=default --zone=us-central1-f\n\n1. to curl internal IPs and External IPs of the two instances\n2. firewall\ngcloud compute firewall-rules list\ngcloud compute firewall-rules delete allow-http-web-server\n\n3. authorize in IAM: Network Admin and Security Admin roles\n4. create service account in IAM and make a key then save to json file\ngcloud auth activate-service-account --key-file credentials.json\ngcloud compute firewall-rules list\n\n5. Add Role: Compute Security Admin.\ngcloud compute firewall-rules delete allow-http-web-server\n\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"http-load-balancer-with-cloud-armor",children:"HTTP Load Balancer with Cloud Armor"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.cloudskillsboost.google/course_sessions/7047645/labs/377214",children:"https://www.cloudskillsboost.google/course_sessions/7047645/labs/377214"}),"\n",(0,o.jsx)(n.a,{href:"https://stackoverflow.com/questions/64362197/nginx-instance-problems",children:"https://stackoverflow.com/questions/64362197/nginx-instance-problems"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1. set firewall for http-80 and allow-health-check\nIn the Cloud Console, navigate to Navigation menu (Navigation menu icon) > VPC network > Firewall.\n\n2. Configure instance templates and create instance groups\nIn the Cloud console, go to Navigation menu (Navigation menu icon) > Compute Engine > Instance templates\nIn the Cloud console, go to Navigation menu (Navigation menu icon) > Compute Engine > Instance groups\n\n3. Configure the HTTP Load Balancer\nIn the Cloud Console, click Navigation menu (Navigation menu icon) > click Network Services > Load balancing\n\n4. Use a VM instance to test\nIn the Console, navigate to Navigation menu (Navigation menu icon) > Compute Engine > VM instances\nsudo apt-get -y install siege\nexport LB_IP=[LB_IP_v4]\nsiege -c 150 -t120s http://$LB_IP\n=> go to load balencing then check monitor\n\n\n5. Create the security policy\nset denylist for change balance\nIn the Cloud console, navigate to Navigation menu > Network Security > Cloud Armor Policies\n\ncurl http://$LB_IP\nsiege -c 150 -t120s http://$LB_IP\n\ncheck log\nIn the console, navigate to Navigation menu > Network Security > Cloud Armor Policies.\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Set your region and zone\n\ngcloud config set compute/zone "us-east4-c"\nexport ZONE=$(gcloud config get compute/zone)\n\ngcloud config set compute/region "us-east4"\nexport REGION=$(gcloud config get compute/region)\n\n\nCreate a Compute Engine instance\n\nAdd Apache2 HTTP Server to your instance\nsudo apt-get update\nsudo apt-get install apache2 php7.0\n\nsudo service apache2 restart\n\n## Create a Monitoring Metrics Scope\ncurl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh\nsudo bash add-google-cloud-ops-agent-repo.sh --also-install\nsudo systemctl status google-cloud-ops-agent"*"\nsudo apt-get update\n\n## Create an uptime check\n\n## Create an alerting policy\n\n## Create a dashboard and chart\n\n## View your logs\n\n## Check out what happens when you start and stop the VM instance.\n\n## Check the uptime check results and triggered alerts\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"dataproc",children:"Dataproc"}),"\n",(0,o.jsx)(n.p,{children:"Navigation menu > APIs & Services > Library: Cloud Dataproc API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Create a cluster\nIn the Cloud Platform Console, select Navigation menu > Dataproc > Clusters, then click Create cluster\n\n## Submit a job\nClick Jobs in the left pane to switch to Dataproc's jobs view, then click Submit job.\n\n## View the job output\n\n## Update a cluster\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Command Line"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Create a cluster\ngcloud config set dataproc/region us-east1\n\nPROJECT_ID=$(gcloud config get-value project) && \\\ngcloud config set project $PROJECT_ID\n\nPROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')\n\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n  --member=serviceAccount:$PROJECT_NUMBER-compute@developer.gserviceaccount.com \\\n  --role=roles/storage.admin\n\ngcloud dataproc clusters create example-cluster --worker-boot-disk-size 500 --worker-machine-type=e2-standard-4 --master-machine-type=e2-standard-4\n\n##  Submit a job\ngcloud dataproc jobs submit spark --cluster example-cluster \\\n  --class org.apache.spark.examples.SparkPi \\\n  --jars file:///usr/lib/spark/examples/jars/spark-examples.jar -- 1000\n\n## Update a cluster\ngcloud dataproc clusters update example-cluster --num-workers 4\ngcloud dataproc clusters update example-cluster --num-workers 2\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dataflow",children:"Dataflow"}),"\n",(0,o.jsx)(n.p,{children:"Navigation menu > APIs & Services > Library: Dataflow API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Create a Cloud BigQuery dataset and table Using Cloud Shell\nbq mk taxirides\n\nbq mk \\\n--time_partitioning_field timestamp \\\n--schema ride_id:string,point_idx:integer,latitude:float,longitude:float,\\\ntimestamp:timestamp,meter_reading:float,meter_increment:float,ride_status:string,\\\npassenger_count:integer -t taxirides.realtime\n\n## Create a Cloud Storage bucket\nexport BUCKET_NAME=qwiklabs-gcp-00-cf54720c4a17\ngsutil mb gs://$BUCKET_NAME/\n\n## Run the pipeline\ngcloud dataflow jobs run iotflow \\\n    --gcs-location gs://dataflow-templates-us-east4/latest/PubSub_to_BigQuery \\\n    --region us-east4 \\\n    --worker-machine-type e2-medium \\\n    --staging-location gs://qwiklabs-gcp-00-cf54720c4a17/temp \\\n    --parameters inputTopic=projects/pubsub-public-data/topics/taxirides-realtime,outputTableSpec=qwiklabs-gcp-00-cf54720c4a17:taxirides.realtime\n\n\n## Submit a query\nSELECT * FROM `qwiklabs-gcp-00-cf54720c4a17.taxirides.realtime` LIMIT 1000\n\n\n*** Dataflow - Python\n## Create a Cloud Storage bucket\n\n## Install pip and the Cloud Dataflow SDK\ndocker run -it -e DEVSHELL_PROJECT_ID=$DEVSHELL_PROJECT_ID python:3.9 /bin/bash\npip install 'apache-beam[gcp]'==2.42.0\npython -m apache_beam.examples.wordcount --output OUTPUT_FILE\n\n## Run an example pipeline remotely\nBUCKET=gs://<bucket name provided earlier>\npython -m apache_beam.examples.wordcount --project $DEVSHELL_PROJECT_ID \\\n  --runner DataflowRunner \\\n  --staging_location $BUCKET/staging \\\n  --temp_location $BUCKET/temp \\\n  --output $BUCKET/results/output \\\n  --region us-east1\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dataprep",children:"Dataprep"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"create a bucket first\n\n## Initialize Cloud Dataprep\ngcloud beta services identity create --service=dataprep.googleapis.com\n\ngo to Navigation menu > Dataprep\n\n\n\n\n"})}),"\n",(0,o.jsx)(n.h1,{id:"vertex-ai",children:"Vertex AI"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'## Enable Google Cloud services\ngcloud services enable \\\n  compute.googleapis.com \\\n  iam.googleapis.com \\\n  iamcredentials.googleapis.com \\\n  monitoring.googleapis.com \\\n  logging.googleapis.com \\\n  notebooks.googleapis.com \\\n  aiplatform.googleapis.com \\\n  bigquery.googleapis.com \\\n  artifactregistry.googleapis.com \\\n  cloudbuild.googleapis.com \\\n  container.googleapis.com\n\n## Create Vertex AI custom service account for Vertex Tensorboard integration\nSERVICE_ACCOUNT_ID=vertex-custom-training-sa\ngcloud iam service-accounts create $SERVICE_ACCOUNT_ID  \\\n    --description="A custom service account for Vertex custom training with Tensorboard" \\\n    --display-name="Vertex AI Custom Training"\n\nPROJECT_ID=$(gcloud config get-value core/project)\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n    --member=serviceAccount:$SERVICE_ACCOUNT_ID@$PROJECT_ID.iam.gserviceaccount.com \\\n    --role="roles/storage.admin"\n\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n    --member=serviceAccount:$SERVICE_ACCOUNT_ID@$PROJECT_ID.iam.gserviceaccount.com \\\n    --role="roles/bigquery.admin"\n\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n    --member=serviceAccount:$SERVICE_ACCOUNT_ID@$PROJECT_ID.iam.gserviceaccount.com \\\n    --role="roles/aiplatform.user"\n\n## Launch Vertex AI Workbench notebook\ncreate a JupyterLab environment\n\n## Clone the lab repository\ngit clone --depth=1 https://github.com/GoogleCloudPlatform/training-data-analyst\n\n## Install lab dependencies\ncd training-data-analyst/self-paced-labs/vertex-ai/vertex-ai-qwikstart\npip3 install --user -r requirements.txt\n\n'})}),"\n",(0,o.jsx)(n.h1,{id:"cloud-natural-language-api",children:"Cloud Natural Language API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'## Create an API key\nexport GOOGLE_CLOUD_PROJECT=$(gcloud config get-value core/project)\n\ngcloud iam service-accounts create my-natlang-sa \\\n  --display-name "my natural language service account"\n\ngcloud iam service-accounts keys create ~/key.json \\\n  --iam-account my-natlang-sa@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com\n\nexport GOOGLE_APPLICATION_CREDENTIALS="/home/USER/key.json"\n\n## Make an entity analysis request\nin a VM instance\ngcloud ml language analyze-entities --content="Michelangelo Caravaggio, Italian painter, is known for \'The Calling of Saint Matthew\'." > result.json\n\n'})}),"\n",(0,o.jsx)(n.h1,{id:"google-cloud-speech-api",children:"Google Cloud Speech API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'## Create an API key\nexport API_KEY=<YOUR_API_KEY>\n\n## Create your Speech API request\ntouch request.json\n\nnano request.json\n{\n  "config": {\n      "encoding":"FLAC",\n      "languageCode": "en-US"\n  },\n  "audio": {\n      "uri":"gs://cloud-samples-tests/speech/brooklyn.flac"\n  }\n}\n\n## Call the Speech API\ncurl -s -X POST -H "Content-Type: application/json" --data-binary @request.json \\\n"https://speech.googleapis.com/v1/speech:recognize?key=${API_KEY}"\n\ncurl -s -X POST -H "Content-Type: application/json" --data-binary @request.json \\\n"https://speech.googleapis.com/v1/speech:recognize?key=${API_KEY}" > result.json\n\n'})}),"\n",(0,o.jsx)(n.h1,{id:"video-intelligence",children:"Video Intelligence"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Enable the Video Intelligence API\n\n## Set up authorization\ngcloud iam service-accounts create quickstart\n\ngcloud iam service-accounts keys create key.json --iam-account quickstart@<your-project-123>.iam.gserviceaccount.com\n\ngcloud auth activate-service-account --key-file key.json\n\ngcloud auth print-access-token\n\n## Make an annotate video request\ncat > request.json <<EOF\n{\n   \"inputUri\":\"gs://spls/gsp154/video/train.mp4\",\n   \"features\": [\n       \"LABEL_DETECTION\"\n   ]\n}\nEOF\n\ncurl -s -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer '$(gcloud auth print-access-token)'' \\\n    'https://videointelligence.googleapis.com/v1/videos:annotate' \\\n    -d @request.json\n\ncurl -s -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer '$(gcloud auth print-access-token)'' \\\n    'https://videointelligence.googleapis.com/v1/projects/PROJECTS/locations/LOCATIONS/operations/OPERATION_NAME'\n"})}),"\n",(0,o.jsx)(n.h2,{id:"remote-desktop-rdp-into-the-windows-server",children:"Remote Desktop (RDP) into the Windows Server"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"gcloud compute instances get-serial-port-output instance-1\n\ngcloud compute reset-windows-password [instance] --zone [zone] --user [username]\n\n"})}),"\n",(0,o.jsx)(n.h1,{id:"set-up-network-and-http-load-balancers",children:"Set Up Network and HTTP Load Balancers"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.cloudskillsboost.google/course_sessions/7111004/labs/423777",children:"https://www.cloudskillsboost.google/course_sessions/7111004/labs/423777"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'## Set the default region and zone for all resources\ngcloud config set compute/region us-east4\n\ngcloud config set compute/zone us-east4-c\n\n## Create multiple web server instances\ngcloud compute instances create www1 \\\n    --zone=us-east4-c \\\n    --tags=network-lb-tag \\\n    --machine-type=e2-small \\\n    --image-family=debian-11 \\\n    --image-project=debian-cloud \\\n    --metadata=startup-script=\'#!/bin/bash\n      apt-get update\n      apt-get install apache2 -y\n      service apache2 restart\n      echo "\n<h3>Web Server: www1</h3>" | tee /var/www/html/index.html\'\n\ngcloud compute instances create www2 \\\n    --zone=us-east4-c \\\n    --tags=network-lb-tag \\\n    --machine-type=e2-small \\\n    --image-family=debian-11 \\\n    --image-project=debian-cloud \\\n    --metadata=startup-script=\'#!/bin/bash\n      apt-get update\n      apt-get install apache2 -y\n      service apache2 restart\n      echo "\n<h3>Web Server: www2</h3>" | tee /var/www/html/index.html\'\n\ngcloud compute instances create www3 \\\n    --zone=us-east4-c  \\\n    --tags=network-lb-tag \\\n    --machine-type=e2-small \\\n    --image-family=debian-11 \\\n    --image-project=debian-cloud \\\n    --metadata=startup-script=\'#!/bin/bash\n      apt-get update\n      apt-get install apache2 -y\n      service apache2 restart\n      echo "\n<h3>Web Server: www3</h3>" | tee /var/www/html/index.html\'\n\ngcloud compute firewall-rules create www-firewall-network-lb \\\n    --target-tags network-lb-tag --allow tcp:80\n\ngcloud compute instances list\ncurl http://[IP_ADDRESS]\n\n## Configure the load balancing service\ngcloud compute addresses create network-lb-ip-1 \\\n  --region us-east4\n\ngcloud compute http-health-checks create basic-check\n\ngcloud compute target-pools create www-pool \\\n  --region us-east4 --http-health-check basic-check\n\ngcloud compute target-pools add-instances www-pool \\\n    --instances www1,www2,www3\n\ngcloud compute forwarding-rules create www-rule \\\n    --region  us-east4 \\\n    --ports 80 \\\n    --address network-lb-ip-1 \\\n    --target-pool www-pool\n\n## Sending traffic to your instances\ngcloud compute forwarding-rules describe www-rule --region us-east4\n\nIPADDRESS=$(gcloud compute forwarding-rules describe www-rule --region us-east4 --format="json" | jq -r .IPAddress)\necho $IPADDRESS\n\nwhile true; do curl -m1 $IPADDRESS; done\n\n## Create an HTTP load balancer\ngcloud compute instance-templates create lb-backend-template \\\n   --region=us-east4 \\\n   --network=default \\\n   --subnet=default \\\n   --tags=allow-health-check \\\n   --machine-type=e2-medium \\\n   --image-family=debian-11 \\\n   --image-project=debian-cloud \\\n   --metadata=startup-script=\'#!/bin/bash\n     apt-get update\n     apt-get install apache2 -y\n     a2ensite default-ssl\n     a2enmod ssl\n     vm_hostname="$(curl -H "Metadata-Flavor:Google" \\\n     http://169.254.169.254/computeMetadata/v1/instance/name)"\n     echo "Page served from: $vm_hostname" | \\\n     tee /var/www/html/index.html\n     systemctl restart apache2\'\n\ngcloud compute instance-groups managed create lb-backend-group \\\n   --template=lb-backend-template --size=2 --zone=us-east4-c\n\ngcloud compute firewall-rules create fw-allow-health-check \\\n  --network=default \\\n  --action=allow \\\n  --direction=ingress \\\n  --source-ranges=130.211.0.0/22,35.191.0.0/16 \\\n  --target-tags=allow-health-check \\\n  --rules=tcp:80\n\ngcloud compute addresses create lb-ipv4-1 \\\n  --ip-version=IPV4 \\\n  --global\n\ngcloud compute addresses describe lb-ipv4-1 \\\n  --format="get(address)" \\\n  --global\n\ngcloud compute health-checks create http http-basic-check \\\n  --port 80\n\ngcloud compute backend-services create web-backend-service \\\n  --protocol=HTTP \\\n  --port-name=http \\\n  --health-checks=http-basic-check \\\n  --global\n\ngcloud compute backend-services add-backend web-backend-service \\\n  --instance-group=lb-backend-group \\\n  --instance-group-zone=us-east4-c \\\n  --global\n\ngcloud compute url-maps create web-map-http \\\n    --default-service web-backend-service\n\ngcloud compute target-http-proxies create http-lb-proxy \\\n    --url-map web-map-http\n\ngcloud compute forwarding-rules create http-content-rule \\\n   --address=lb-ipv4-1\\\n   --global \\\n   --target-http-proxy=http-lb-proxy \\\n   --ports=80\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"create-and-manage-cloud-resources-challenge-lab",children:"Create and Manage Cloud Resources: Challenge Lab"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"export INSTANCE_NAME=nucleus-jumphost-868\nexport REGION=us-west3\nexport ZONE=us-west3-a\nexport PORT=8083\nexport FIREWALL_RULE_NAME=accept-tcp-rule-897\n\ngcloud compute instances create $INSTANCE_NAME \\\n  --zone=$ZONE \\\n  --machine-type=e2-micro\n\ngcloud container clusters create nucleus-cluster \\\n  --zone=$ZONE \\\n  --num-nodes=1 \\\n  --machine-type=n1-standard-1\n\nkubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0\n\nkubectl expose deployment hello-server \\\n--type=LoadBalancer \\\n--port $PORT\n\n\ncat << EOF > startup.sh\n#! /bin/bash\napt-get update\napt-get install -y nginx\nservice nginx start\nsed -i -- 's/nginx/Google Cloud Platform - '\"\\$HOSTNAME\"'/' /var/www/html/index.nginx-debian.html\nEOF\n\n\n\ngcloud compute instance-templates create web-server-template \\\n          --metadata-from-file startup-script=startup.sh \\\n          --machine-type e2-micro \\\n          --region $REGION\ngcloud compute instance-groups managed create web-server-group \\\n          --base-instance-name web-server \\\n          --size 2 \\\n          --template web-server-template \\\n          --region us-east1 \\\n          --target-pool nginx-pool\n\ngcloud compute firewall-rules create $FIREWALL_RULE_NAME \\\n          --allow tcp:80\ngcloud compute http-health-checks create http-basic-check\ngcloud compute instance-groups managed \\\n          set-named-ports web-server-group \\\n          --named-ports http:80 \\\n          --region $REGION\ngcloud compute backend-services create web-server-backend \\\n          --protocol HTTP \\\n          --http-health-checks http-basic-check \\\n          --global\ngcloud compute backend-services add-backend web-server-backend \\\n          --instance-group web-server-group \\\n          --instance-group-region $REGION \\\n          --global\ngcloud compute url-maps create web-server-map \\\n          --default-service web-server-backend\ngcloud compute target-http-proxies create http-lb-proxy \\\n          --url-map web-server-map\ngcloud compute forwarding-rules create http-content-rule \\\n        --global \\\n        --target-http-proxy http-lb-proxy \\\n        --ports 80\n\ngcloud compute forwarding-rules list\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"securing-virtual-machines-using-beyondcorp",children:"Securing Virtual Machines using BeyondCorp"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"## Demonstrate tunneling using SSH and RDP connections\ngcloud compute ssh linux-iap\ngcloud compute start-iap-tunnel windows-iap 3389 --local-host-port=localhost:0  --zone=us-east4-c\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"build-and-secure-networks-in-google-cloud-challenge-lab",children:"Build and Secure Networks in Google Cloud: Challenge Lab"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"export SSH_IAP_NETWORK_TAG=accept-ssh-iap-ingress-ql-497\nexport SSH_INTERNAL_NETWORK_TAG=accept-ssh-internal-ingress-ql-497\nexport HTTP_NETWORK_TAG=accept-http-ingress-ql-497\nexport ZONE=us-central1-c\n\n\ngcloud compute firewall-rules delete open-access\n\ngcloud compute firewall-rules create ssh-ingress --allow=tcp:22 --source-ranges 35.235.240.0/20 --target-tags $SSH_IAP_NETWORK_TAG --network acme-vpc\n\ngcloud compute instances add-tags bastion --tags=$SSH_IAP_NETWORK_TAG --zone=$ZONE\n\ngcloud compute firewall-rules create http-ingress --allow=tcp:80 --source-ranges 0.0.0.0/0 --target-tags $HTTP_NETWORK_TAG --network acme-vpc\n\ngcloud compute instances add-tags juice-shop --tags=$HTTP_NETWORK_TAG --zone=$ZONE\n\ngcloud compute firewall-rules create internal-ssh-ingress --allow=tcp:22 --source-ranges 192.168.10.0/24 --target-tags $SSH_INTERNAL_NETWORK_TAG --network acme-vpc\n\ngcloud compute instances add-tags juice-shop --tags=$SSH_INTERNAL_NETWORK_TAG --zone=$ZONE\n\ngcloud compute ssh juice-shop --internal-ip\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"perform-foundational-data-ml-and-ai-tasks-in-google-cloud-challenge-lab",children:"Perform Foundational Data, ML, and AI Tasks in Google Cloud: Challenge Lab"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'export LAB_SCHEMA=gs://cloud-training/gsp323/lab.schema\nexport LAB_CSV=gs://cloud-training/gsp323/lab.csv\nexport LAB_JS=gs://cloud-training/gsp323/lab.js\n\nexport PROJECT_ID=qwiklabs-gcp-00-0ff0ec036075\nexport DATASET=lab_803\nexport REGION=us-east1\nexport TABLE=customers_673\n\nexport SCHEMA=guid:STRING,isActive:BOOLEAN,firstname:STRING,surname:STRING,company:STRING,email:STRING,phone:STRING,address:STRING,about:STRING,registered:TIMESTAMP,latitude:FLOAT,longitude:FLOAT\nexport CLUSTER=cluster-x\nexport MACHINETYPE=e2-standard-2\n\ngcloud config set dataproc/region $REGION\nbq mk $DATASET\ngsutil mb gs://$PROJECT_ID-marking\ngsutil cp $LAB_SCHEMA .\ngsutil cp $LAB_CSV .\ncat lab.schema\n\nbq mk --table $DATASET.$TABLE $SCHEMA\n\ngcloud dataflow jobs run lab-transform --gcs-location gs://dataflow-templates-$REGION/latest/GCS_Text_to_BigQuery --worker-machine-type $MACHINETYPE --region $REGION --staging-location gs://$PROJECT_ID-marking/temp --parameters javascriptTextTransformGcsPath=$LAB_JS,JSONPath=$LAB_SCHEMA,javascriptTextTransformFunctionName=transform,outputTable=$PROJECT_ID:$DATASET.$TABLE,inputFilePattern=$LAB_CSV,bigQueryLoadingTemporaryDirectory=gs://$PROJECT_ID-marking/bigquery_temp\n\ngcloud dataproc clusters create $CLUSTER --worker-boot-disk-size 500 --worker-machine-type=$export --master-machine-type=$export\n\n---ssh\ngcloud compute ssh cluster-x-m\nhdfs dfs -cp gs://cloud-training/gsp323/data.txt /data.txt\n\n---back\ngcloud dataproc jobs submit spark --cluster $CLUSTER \\\n  --class org.apache.spark.examples.SparkPageRank \\\n  --cluster=$CLUSTER \\\n  --jars file:///usr/lib/spark/examples/jars/spark-examples.jar -- /data.txt\n\n--- task 1 done\n\ngcloud services enable apikeys.googleapis.com\ngcloud alpha services api-keys create --display-name="testname1"\nKEY_NAME=$(gcloud alpha services api-keys list --format="value(name)" --filter "displayName=testname1")\nAPI_KEY=$(gcloud alpha services api-keys get-key-string $KEY_NAME --format="value(keyString)")\necho $API_KEY\n\n--- grant GOOGLE CLOUD SDK and auth\ngcloud iam service-accounts create techvine \\\n  --display-name "my natural language service account"\ngcloud iam service-accounts keys create ~/key.json \\\n  --iam-account techvine@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com\nexport GOOGLE_APPLICATION_CREDENTIALS="/home/$USER/key.json"\ngcloud auth activate-service-account techvine@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com --key-file=$GOOGLE_APPLICATION_CREDENTIALS\ngcloud ml language analyze-entities --content="Old Norse texts portray Odin as one-eyed and long-bearded, frequently wielding a spear named Gungnir and wearing a cloak and a broad hat." > result.json\ngcloud auth login --no-launch-browser\n\n--- task 2 done\n\ngsutil cp result.json gs://qwiklabs-gcp-00-0ff0ec036075-marking/task4-cnl-160.result\n--- task 4 done\n\n\n\n\n\n--- task 3 start\ncat > request.json <<EOF\n{\n  "config": {\n      "encoding":"FLAC",\n      "languageCode": "en-US"\n  },\n  "audio": {\n      "uri":"gs://cloud-training/gsp323/task3.flac"\n  }\n}\nEOF\ncurl -s -X POST -H "Content-Type: application/json" --data-binary @request.json \\\n"https://speech.googleapis.com/v1/speech:recognize?key=${API_KEY}" > result.json\ngsutil cp result.json gs://qwiklabs-gcp-00-0ff0ec036075-marking/task3-gcs-624.result\n--- task 3 done\n\n\ngcloud iam service-accounts create quickstart\ngcloud iam service-accounts keys create key.json --iam-account quickstart@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com\ngcloud auth activate-service-account --key-file key.json\nexport ACCESS_TOKEN=$(gcloud auth print-access-token)\ncat > request.json <<EOF\n{\n   "inputUri":"gs://spls/gsp154/video/train.mp4",\n   "features": [\n       "TEXT_DETECTION"\n   ]\n}\nEOF\n\n--------------------------------------------------------------------------------------------------------------------------\n\ncurl -s -H \'Content-Type: application/json\' \\\n    -H "Authorization: Bearer $ACCESS_TOKEN" \\\n    \'https://videointelligence.googleapis.com/v1/videos:annotate\' \\\n    -d @request.json\ncurl -s -H \'Content-Type: application/json\' -H "Authorization: Bearer $ACCESS_TOKEN" \'https://videointelligence.googleapis.com/v1/operations/OPERATION_FROM_PREVIOUS_REQUEST\' > result1.json\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(6540);const a={},s=o.createContext(a);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);