"use strict";(self.webpackChunkxing_life_3=self.webpackChunkxing_life_3||[]).push([[1792],{8693:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});var r=l(4848),i=l(8453);const s={},d="To know rails",t={id:"technique/pg_languages/ruby_on_rails/to_know_rails",title:"To know rails",description:"ref//ithelp.ithome.com.tw/users/20065841/ironman/3021",source:"@site/docs/technique/pg_languages/ruby_on_rails/to_know_rails.md",sourceDirName:"technique/pg_languages/ruby_on_rails",slug:"/technique/pg_languages/ruby_on_rails/to_know_rails",permalink:"/docs/technique/pg_languages/ruby_on_rails/to_know_rails",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"techniqueSidebar",previous:{title:"syntax_highlighting",permalink:"/docs/technique/pg_languages/ruby_on_rails/syntax_highlighting"},next:{title:"unicorn",permalink:"/docs/technique/pg_languages/ruby_on_rails/unicorn"}},a={},o=[{value:"1. build a gem",id:"1-build-a-gem",level:2},{value:"try in irb",id:"try-in-irb",level:5},{value:"2. generate gem commands",id:"2-generate-gem-commands",level:2},{value:"3. to know rack",id:"3-to-know-rack",level:2},{value:"if &quot;rakcup&quot; does not exist",id:"if-rakcup-does-not-exist",level:4},{value:"New a rack project/dir",id:"new-a-rack-projectdir",level:4},{value:"add dependency to x_rails",id:"add-dependency-to-x_rails",level:4},{value:"4. start an x_rails app",id:"4-start-an-x_rails-app",level:2},{value:"Add the gem into the Gemfile",id:"add-the-gem-into-the-gemfile",level:4},{value:"Add config.rb",id:"add-configrb",level:4},{value:"5. Using application in x_rails",id:"5-using-application-in-x_rails",level:2},{value:"6. controller and routing",id:"6-controller-and-routing",level:2},{value:"routing.rb",id:"routingrb",level:4},{value:"x_rails.rb",id:"x_railsrb",level:4},{value:"try using controller in x_ror",id:"try-using-controller-in-x_ror",level:4},{value:"add autoload method in config/application.rb",id:"add-autoload-method-in-configapplicationrb",level:4},{value:"7. Favicon and Homepage",id:"7-favicon-and-homepage",level:2},{value:"x_rails",id:"x_rails",level:4},{value:"x_ror",id:"x_ror",level:4},{value:"8. autoload contorller",id:"8-autoload-contorller",level:2},{value:"$LOAD_PATH",id:"load_path",level:3},{value:"$LOADED_FEATURES",id:"loaded_features",level:3},{value:"const_missing",id:"const_missing",level:3},{value:"9. View",id:"9-view",level:2},{value:"erubi",id:"erubi",level:3},{value:"controller class",id:"controller-class",level:3},{value:"add render method and controller_name in controller.rb",id:"add-render-method-and-controller_name-in-controllerrb",level:4},{value:"apply the view in x_ror",id:"apply-the-view-in-x_ror",level:4},{value:"helper",id:"helper",level:3},{value:"layout",id:"layout",level:3},{value:"10. Model",id:"10-model",level:2},{value:"multi_json",id:"multi_json",level:3},{value:"file_model",id:"file_model",level:3},{value:"Using in x_ror",id:"using-in-x_ror",level:3},{value:"create a db json",id:"create-a-db-json",level:4},{value:"def show method in tasks_controller",id:"def-show-method-in-tasks_controller",level:4},{value:"show.html.erb",id:"showhtmlerb",level:4},{value:"model all data",id:"model-all-data",level:3},{value:"def all in file_model",id:"def-all-in-file_model",level:4},{value:"index.html.erb",id:"indexhtmlerb",level:4},{value:"model create record",id:"model-create-record",level:3},{value:"def create in model",id:"def-create-in-model",level:4},{value:"def create in action",id:"def-create-in-action",level:4},{value:"11. request",id:"11-request",level:2},{value:"x_rails controller handle &quot;request&quot;",id:"x_rails-controller-handle-request",level:3},{value:"Try params in show",id:"try-params-in-show",level:3},{value:"12. response",id:"12-response",level:2},{value:"x_rails controller handle &quot;response&quot;",id:"x_rails-controller-handle-response",level:4},{value:"Modify the response",id:"modify-the-response",level:4},{value:"13. Migration",id:"13-migration",level:2},{value:"Using SQLite",id:"using-sqlite",level:3},{value:"create a migration_file",id:"create-a-migration_file",level:3},{value:"migration_20221206.rb in x_ror",id:"migration_20221206rb-in-x_ror",level:4},{value:"SQLite model",id:"sqlite-model",level:3},{value:"to_plural",id:"to_plural",level:5},{value:"get table schema",id:"get-table-schema",level:4},{value:"14. ORM",id:"14-orm",level:2},{value:"Create",id:"create",level:3},{value:"find &amp; all",id:"find--all",level:3},{value:"get &amp; set",id:"get--set",level:3},{value:"save &amp; save!",id:"save--save",level:3},{value:"delete",id:"delete",level:3},{value:"try script",id:"try-script",level:4},{value:"15. attr_accessor",id:"15-attr_accessor",level:2},{value:"16. powerful ORM",id:"16-powerful-orm",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"to-know-rails",children:"To know rails"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["ref: ",(0,r.jsx)(n.a,{href:"https://ithelp.ithome.com.tw/users/20065841/ironman/3021",children:"https://ithelp.ithome.com.tw/users/20065841/ironman/3021"}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/rails/rails",children:"https://github.com/rails/rails"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-build-a-gem",children:"1. build a gem"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"rails is a gem"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"bundle gem xing_gem // using 'x_rails' which means xing's rails to practice.\n\n// write some code\n\ngem build x_rails.gemspec\n\ngem install ./x_rails-0.1.0.gem\n\n"})}),"\n",(0,r.jsx)(n.h5,{id:"try-in-irb",children:"try in irb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require 'x_rails'  // include\nXRails.who  // the function\n"})}),"\n",(0,r.jsx)(n.h2,{id:"2-generate-gem-commands",children:"2. generate gem commands"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"like rails new app_name"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"create a file at project/bin"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"touch bin/hello\nchmod a+x bin/hello\n"})}),"\n",(0,r.jsx)(n.p,{children:"code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"#!/usr/bin/env ruby\n\nrequire 'x_rails'\nputs XRails.hello(ARGV[0])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-to-know-rack",children:"3. to know rack"}),"\n",(0,r.jsx)(n.h4,{id:"if-rakcup-does-not-exist",children:'if "rakcup" does not exist'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"gem install rackup\n"})}),"\n",(0,r.jsx)(n.h4,{id:"new-a-rack-projectdir",children:"New a rack project/dir"}),"\n",(0,r.jsx)(n.p,{children:"new a config.rb file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"run proc{\n    [200, {'content-type' => 'text/html'},\n    [\"Hello, Xing312101!\"]]\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"add-dependency-to-x_rails",children:"add dependency to x_rails"}),"\n",(0,r.jsx)(n.p,{children:"In x_rails/x_rails.gemspec\nadd rack dependency to mean x_rails is using rack framework."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'spec.add_runtime_dependency "rack"\n'})}),"\n",(0,r.jsx)(n.p,{children:"if use rspec"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'gem.add_development_dependency "rspec"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"4-start-an-x_rails-app",children:"4. start an x_rails app"}),"\n",(0,r.jsx)(n.p,{children:"create the app project and struct"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mkdir config\nmkdir app\ntouch Gemfile\n"})}),"\n",(0,r.jsx)(n.h4,{id:"add-the-gem-into-the-gemfile",children:"Add the gem into the Gemfile"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"source 'https://rubygems.org'\ngem 'x_rails', path: \"/Users/xing/xImitateRails/x_rails\"\n"})}),"\n",(0,r.jsx)(n.h4,{id:"add-configrb",children:"Add config.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"run proc{\n    [200, {'content-type' => 'text/html'},\n    [\"Hello, Xing312101!\"]]\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-using-application-in-x_rails",children:"5. Using application in x_rails"}),"\n",(0,r.jsx)(n.p,{children:"at module XRails in x_rails"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  class Application\n    def call(env)\n      [200, {'content-type' => 'text/html'},\n       [\"I use XRails, GO!!!!\"]]\n    end\n  end\n"})}),"\n",(0,r.jsx)(n.p,{children:"at x_ror/config/application.rb in x_ror"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'require "x_rails"\n\nmodule XRor\n  class Application < XRails::Application\n  end\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"at x_ror/config.ru"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require_relative 'config/application'\nrun XRor::Application.new\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-controller-and-routing",children:"6. controller and routing"}),"\n",(0,r.jsx)(n.h4,{id:"routingrb",children:"routing.rb"}),"\n",(0,r.jsx)(n.p,{children:"create routing.rb at lib in x_rails"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'module XRails\n  class Application\n    def controller_and_action(env)\n      before, controller, action, after = env["PATH_INFO"].split(\'/\', 4)\n\n      controller = controller.capitalize + "Controller"\n\n      [Object.const_get(controller), action]\n    end\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"x_railsrb",children:"x_rails.rb"}),"\n",(0,r.jsx)(n.p,{children:"add routing to get controller and action"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  class Application\n    def call(env)\n      # get controller name and action name\n      klass, action =  get_controller_and_action(env)\n      controller = klass.new(env)\n      text = controller.send(action)\n\n      [200,\n        {'content-type' => 'text/html'},\n        [text]\n      ]\n    end\n  end\n\n  class Controller\n    attr_reader :env\n\n    def initialize(env)\n      @env = env\n    end\n  end\n"})}),"\n",(0,r.jsx)(n.h4,{id:"try-using-controller-in-x_ror",children:"try using controller in x_ror"}),"\n",(0,r.jsx)(n.p,{children:"new a controller at app/controllers that same as rails"}),"\n",(0,r.jsx)(n.p,{children:"tasks_controller.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'class TasksController < XRails::Controller\n  def index\n    "Hello, there are tasks."\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"add-autoload-method-in-configapplicationrb",children:"add autoload method in config/application.rb"}),"\n",(0,r.jsx)(n.p,{children:"for auto reload file when refresh page"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'$LOAD_PATH << File.join(File.dirname(__FILE__), "..", "app", "controllers")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"7-favicon-and-homepage",children:"7. Favicon and Homepage"}),"\n",(0,r.jsx)(n.h4,{id:"x_rails",children:"x_rails"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Application\n    def call(env)\n      return favicon if '/favicon.ico' == env[\"PATH_INFO\"]\n      return index if '/' == env[\"PATH_INFO\"]\n\n      begin\n        # get controller name and action name\n        klass, action =  get_controller_and_action(env)\n        controller = klass.new(env)\n        text = controller.send(action)\n\n        [200,\n          {'content-type' => 'text/html'},\n          [text]\n        ]\n      rescue\n        [404, {'content-type' => 'text/html'},\n        ['This is a 404 page!!']]\n      end\n    end\n\n    private\n\n    def index\n      begin\n        home_klass = Object.const_get('HelloController')\n        controller = home_klass.new(env)\n        text = controller.send(:index)\n        [200, {'content-type' => 'text/html'}, [text]]\n      rescue NameError\n        [200, {'content-type' => 'text/html'}, ['This is a index page']]\n      end\n    end\n\n    def favicon\n      return [404, {'content-type' => 'text/html'}, []]\n    end\n  end\n"})}),"\n",(0,r.jsx)(n.h4,{id:"x_ror",children:"x_ror"}),"\n",(0,r.jsx)(n.p,{children:"add a HelloController\nadd require 'hello_controller'"}),"\n",(0,r.jsx)(n.h2,{id:"8-autoload-contorller",children:"8. autoload contorller"}),"\n",(0,r.jsx)(n.h3,{id:"load_path",children:"$LOAD_PATH"}),"\n",(0,r.jsx)(n.p,{children:"It means that the library is there."}),"\n",(0,r.jsx)(n.h3,{id:"loaded_features",children:"$LOADED_FEATURES"}),"\n",(0,r.jsx)(n.p,{children:"It records the required library."}),"\n",(0,r.jsx)(n.h3,{id:"const_missing",children:"const_missing"}),"\n",(0,r.jsx)(n.p,{children:"using const_missing to find which file need auto loading"}),"\n",(0,r.jsx)(n.p,{children:"at lib/x_rails/support.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Object\n  def self.const_missing(const)\n    require XRails.to_underscore(const.to_s)\n    Object.const_get(const)\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"at lib/x_rails/dependencies.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Object\n  def self.const_missing(const)\n    require XRails.to_underscore(const.to_s)\n    FinalObject.const_get(const)\n  end\nend\n\nclass FinalObject < Object\n  # avoid to unlimit loop\n  def self.const_missing(const)\n    nil\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"in lib/x_rails.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'require "x_rails/support"\nrequire "x_rails/dependencies"\n'})}),"\n",(0,r.jsx)(n.p,{children:"remove the request controller at x_ror/config"}),"\n",(0,r.jsx)(n.h2,{id:"9-view",children:"9. View"}),"\n",(0,r.jsx)(n.h3,{id:"erubi",children:"erubi"}),"\n",(0,r.jsx)(n.p,{children:"rails 5 ~ ... are using erubi not erb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'## x_rails/x_rails.gemspec\n\nspec.add_runtime_dependency "erubi"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"gem 'erubi'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"controller-class",children:"controller class"}),"\n",(0,r.jsx)(n.p,{children:"create a controller.rb in lib/x_rails/"}),"\n",(0,r.jsx)(n.p,{children:"in lib/x_rails.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'require "x_rails/controller"\n\nremove the class controller code.\n'})}),"\n",(0,r.jsx)(n.h4,{id:"add-render-method-and-controller_name-in-controllerrb",children:"add render method and controller_name in controller.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def render(view_name)\n    # project/app/views/{{controller_name}}/{{view_name}}.html.erb\n    # the path as a convention\n    filename = File.join "app", "views", controller_name, "#{view_name}.html.erb"\n    viewTemplate = File.read filename\n    eval(Erubi::Engine.new(viewTemplate).src)\nend\n\ndef controller_name\n    klass = self.class\n    klass = klass.to_s.gsub /Controller$/, ""\n    XRails.to_underscore klass\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"apply-the-view-in-x_ror",children:"apply the view in x_ror"}),"\n",(0,r.jsx)(n.p,{children:"in TasksController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def index\n    @message = \"Hello Xing312101, how about the view?\"\n    render('index')\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"create a view file: index.html.erb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>Index</title>\n  </head>\n  <body>\n    <h1>task index page</h1>\n    <%= @message %>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"helper",children:"helper"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"... \u61c9\u8a72\u6709\u66f4\u597d\u7684\u4f4d\u7f6e\uff0c\u76ee\u524d\u5148\u653econtroller"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def link_to(name = nil, url = nil)\n  "<a href=\\"#{url}\\">#{name}</a>"\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"layout",children:"layout"}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u5c07\u539f\u672c\u7684render\u7684\u7d50\u679c\u653e\u5230\u4e00\u500bclass\u7684attribute\n\u518d\u505a\u4e00\u500b\u53e6\u4e00\u500b\u50cfrender\u7684layout\u5373\u53ef\u5b8c\u6210"}),"\n",(0,r.jsx)(n.p,{children:"at controller.rb in x_rails"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'attr_reader :content\n\ndef layout_render()\n  filename = File.join("app", "views", "layouts", "application.html.erb")\n  template = File.read(filename)\n  eval(Erubi::Engine.new(template).src)\nend\n\ndef content\n  @content\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"layout file in x_ror"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>Index</title>\n  </head>\n  <body>\n    <div>\n      Hello this is application layout.\n    </div>\n    <%= @content %>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"10-model",children:"10. Model"}),"\n",(0,r.jsx)(n.h3,{id:"multi_json",children:"multi_json"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"as db data"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'## x_rails/x_rails.gemspec\n\nspec.add_runtime_dependency "multi_json"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"file_model",children:"file_model"}),"\n",(0,r.jsx)(n.p,{children:"an like ActiveModel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'## x_rails/lib/x_rails/file_model.rb\n\nrequire "multi_json"\n\nmodule XRails\n  module Model\n    class FileModel\n      def initialize(file)\n        @file = file\n        basename = File.split(file)[-1]\n        @id = File.basename(basename, ".json").to_i\n\n        obj = File.read(file)\n        @hash = MultiJson.load(obj)\n      end\n\n      def [](name)\n        @hash[name.to_s]\n      end\n\n      def []=(name, value)\n        @hash[name.to_s] = value\n      end\n\n      def self.find(id)\n        begin\n         FileModel.new("db/tasks/#{id}.json")\n        rescue\n         return nil\n        end\n      end\n    end\n  end\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"at x_rails/lib/x_rails.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'require_relative "x_rails/file_model"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-in-x_ror",children:"Using in x_ror"}),"\n",(0,r.jsx)(n.h4,{id:"create-a-db-json",children:"create a db json"}),"\n",(0,r.jsx)(n.p,{children:"db/tasks/1.json"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n  "title": "\u7b2c\u4e00\u500bTask",\n  "content": "\u5403\u559d\u62c9\u6492\u7761"\n}\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"def-show-method-in-tasks_controller",children:"def show method in tasks_controller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"@task = Mavericks::Model::FileModel.find(1)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"showhtmlerb",children:"show.html.erb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<div style="padding: 20px; background: red;">\n  <div style="padding: 5px; background: green;">\n    <%= @task["title"] %>\n  </div>\n  <div style="padding: 5px; background: yellow;">\n    <%= @task["content"] %>\n  </div>\n</div>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"model-all-data",children:"model all data"}),"\n",(0,r.jsx)(n.h4,{id:"def-all-in-file_model",children:"def all in file_model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def self.all\n  files = Dir['db/tasks/*.json']\n  files.map { |f| FileModel.new f}\nend\n"})}),"\n",(0,r.jsx)(n.h4,{id:"indexhtmlerb",children:"index.html.erb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<h1>\u4efb\u52d9\u7684index</h1>\n<%= @message %>\n<%= link_to("task detail", "https://www.google.com/") %>\n\n<% @tasks.each do |task| %>\n  <div style="padding: 5px; background: red;">\n    <div style="padding: 5px; background: green;">\n      <%= task["title"] %>\n    </div>\n    <div style="padding: 5px; background: yellow;">\n      <%= task["content"] %>\n    </div>\n  </div>\n<% end %>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"model-create-record",children:"model create record"}),"\n",(0,r.jsx)(n.h4,{id:"def-create-in-model",children:"def create in model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def self.create(attr)\n  hash = {}\n  hash[:title] = attr[:title]\n  hash[:content] = attr[:content]\n\n  # find max id\n  id =  Dir[\'/Users/Xing312101/xing/x_ror/db/tasks/*\'].max[/\\d+/]\n\n  id = id ? id.to_i + 1 : 1\n\n  File.open("db/tasks/#{id}.json", "w") do |f|\n    f.write <<-TEMPLATE\n      {\n        "title": "#{hash[:title]}",\n        "content": "#{hash[:content]}"\n      }\n    TEMPLATE\n  end\n\n    FileModel.new "db/tasks/#{id}.json"\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"def-create-in-action",children:"def create in action"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def create\n  attrs = {\n    title: 'Hello',\n    content: 'Create a new record'\n  }\n\n  XRails::Model::FileModel.create(attrs)\n  @tasks = XRails::Model::FileModel.all\n  render 'index'\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"11-request",children:"11. request"}),"\n",(0,r.jsx)(n.h3,{id:"x_rails-controller-handle-request",children:'x_rails controller handle "request"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def request\n  @request || @request = Rack::Request.new(@env)\nend\n\ndef params\n  request.params\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"try-params-in-show",children:"Try params in show"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def show\n  @task = FileModel.find(params['id'])\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"12-response",children:"12. response"}),"\n",(0,r.jsx)(n.h4,{id:"x_rails-controller-handle-response",children:'x_rails controller handle "response"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def response(text, status = 200, headers = {})\n  raise "Already responded!" if @response\n  @response = Rack::Response.new(text, status, headers)\nend\n\ndef get_response\n  @response\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"modify-the-response",children:"Modify the response"}),"\n",(0,r.jsx)(n.p,{children:"remove isRendered"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def call(env)\n  return favicon if '/favicon.ico' == env[\"PATH_INFO\"]\n  return index(env) if '/' == env[\"PATH_INFO\"]\n\n  begin\n    # get controller name and action name\n    klass, action = get_controller_and_action(env)\n    controller = klass.new(env)\n\n    controller.send(action)\n    default_render(controller, action) unless controller.content\n\n    # layout\n    controller.layout_render\n\n    if controller.get_response\n      controller.get_response.to_a\n    else\n      [500, {'Content-Type' => 'text/html'},\n        ['server error!!']]\n    end\n  rescue => e\n    puts e.message\n    puts e.backtrace\n    [404, {'content-type' => 'text/html'},\n    ['This is a 404 page!!']]\n  end\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"13-migration",children:"13. Migration"}),"\n",(0,r.jsx)(n.h3,{id:"using-sqlite",children:"Using SQLite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"## x_rails/x_rails.gemspec\nspec.add_runtime_dependency 'sqlite3'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-migration_file",children:"create a migration_file"}),"\n",(0,r.jsx)(n.h4,{id:"migration_20221206rb-in-x_ror",children:"migration_20221206.rb in x_ror"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require 'sqlite3'\n\nconn = SQLite3::Database.new \"x_ror.db\"\n\nconn.execute <<SQL\ncreate table tasks(\nid INTEGER PRIMARY KEY,\ntitle TEXT,\ncontent TEXT);\nSQL\n"})}),"\n",(0,r.jsx)(n.p,{children:"RUN: $ bundle exec ruby hello_x_ror.rb"}),"\n",(0,r.jsx)(n.h3,{id:"sqlite-model",children:"SQLite model"}),"\n",(0,r.jsx)(n.p,{children:"x_rails/lib/x_rails/sqlite_model.rb"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require 'SQLite3'\n\nDB = SQLite3::Database.new 'x_ror.db'\n\nmodule XRails\n  module Model\n    class SQLite\n      def self.table\n        table_name = XRails.to_underscore name\n        XRails.to_plural table_name\n      end\n\n      def self.schema\n        return @schema if @schema\n        @schema = {}\n\n        DB.table_info(table) do |row|\n          @schema[row[\"name\"]] = row[\"type\"]\n        end\n        @schema\n      end\n\n    end\n  end\nend\n"})}),"\n",(0,r.jsx)(n.h5,{id:"to_plural",children:"to_plural"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def self.to_plural(string)\n  pattern = /.*s$|x$|z$|sh$|ch$/\n  pattern.match?(string) ? "#{string}es" : "#{string}s"\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"get-table-schema",children:"get table schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require 'x_rails/sqlite_model'\nrequire 'x_rails/support'\n\nclass Task < XRails::Model::SQLite\nend\n\nputs Task.schema\n"})}),"\n",(0,r.jsx)(n.h2,{id:"14-orm",children:"14. ORM"}),"\n",(0,r.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'class SQLite\n  def initialize(data = nil)\n    @hash = data\n  end\n\n  def self.to_safe_sql_string(val)\n    case val\n    when Numeric\n      val.to_s\n    when String\n      "\'#{val}\'"\n    else\n      raise "Can\'t support #{val.class} to SQL!"\n    end\n  end\n\n  def self.table\n    table_name = XRails.to_underscore name\n    XRails.to_plural table_name\n  end\n\n  def self.schema\n    return @schema if @schema\n    @schema = {}\n\n    DB.table_info(table) do |row|\n      @schema[row["name"]] = row["type"]\n    end\n    @schema\n  end\n\n  def self.create(values)\n    values.delete :id\n    keys = schema.keys - [\'id\']\n    vals = keys.map do |key|\n      values[key.to_sym] ? to_safe_sql_string(values[key.to_sym]) : "null"\n    end\n\n    DB.execute <<-SQL\n      INSERT INTO #{table} (#{keys.join ","})\n      VALUES (#{vals.join ","});\n    SQL\n\n    data = Hash[keys.zip values.values]\n    sql = "SELECT last_insert_rowid();"\n    data["id"] = DB.execute(sql)[0][0]\n    self.new data\n  end\n\n  def self.count\n    DB.execute(<<-SQL)[0][0]\n      SELECT COUNT(*) FROM #{table}\n    SQL\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"find--all",children:"find & all"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def self.find(id)\n  row = DB.execute <<-SQL\n    select #{schema.keys.join ","} from #{table}\n    where id = #{id};\n  SQL\n\n  data = Hash[schema.keys.zip row[0]]\n  self.new data\nend\n\ndef self.all\n  row = DB.execute <<-SQL\n    select #{schema.keys.join ","} from #{table}\n  SQL\n\n  row.map do |attr|\n    data = Hash[schema.keys.zip attr]\n    self.new data\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get--set",children:"get & set"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def [](name)\n  @hash[name.to_s]\nend\n\ndef []=(name, value)\n  @hash[name.to_s] = value\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"save--save",children:"save & save!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def save!\n  unless @hash["id"]\n    self.class.create(@hash)\n    return true\n  end\n\n  fields = @hash.map { |key, value| "#{key}=#{self.class.to_safe_sql_string(value)}" }.join ","\n\n  DB.execute <<-SQL\n    UPDATE #{self.class.table}\n    SET #{fields}\n    WHERE id = #{@hash["id"]}\n  SQL\n\n  true\nend\n\ndef save\n  self.save! rescue false\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"delete",children:"delete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'def delete\n  unless @hash["id"]\n    return true\n  end\n\n  DB.execute <<-SQL\n    DELETE FROM #{self.class.table}\n    WHERE id = #{@hash["id"]}\n  SQL\n\n  true\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"try-script",children:"try script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"require 'x_rails/sqlite_model'\nrequire 'x_rails/support'\n\nclass Task < XRails::Model::SQLite\n\nend\n\nputs Task.schema\n\nTask.create('title': 'Task', 'content': 'Smile')\n\nputs Task.count\n\nTask.all.each { |task| puts \"#{task['title']} : #{task['content']}\"  }\n\nputs Task.find(1)['content']\n\nTask.all.each { |task| task.delete }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"15-attr_accessor",children:"15. attr_accessor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"def method_missing(attr, *args)\n  attrs = self.class.schema\n  attr = attr.to_s.gsub('=', '')\n  if attrs.key?(attr)\n    self.class.define_attr(attrs)\n    val = args.empty? ?  self.send(attr) : self.send(\"#{attr}=\", args[0])\n    return val\n  else\n    super\n  end\nend\n\ndef self.define_attr(attrs)\n  attrs.keys.each do |attr|\n    add_method_to_get(attr)\n    add_method_to_set(attr)\n  end\nend\n\ndef self.add_method_to_get(attr)\n  define_method attr do\n    self[attr.to_s]\n  end\nend\n\ndef self.add_method_to_set(attr)\n  define_method \"#{attr}=\" do |arg|\n    self[attr.to_s] = arg\n  end\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"16-powerful-orm",children:"16. powerful ORM"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"using postgresql as db"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>d,x:()=>t});var r=l(6540);const i={},s=r.createContext(i);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);